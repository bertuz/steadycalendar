create table "public"."calendar_dates" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "calendar_id" bigint,
    "date" date not null
);


alter table "public"."calendar_dates" enable row level security;

create table "public"."calendars" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "name" text,
    "color" text,
    "background_slug" text,
    "updated_at" timestamp with time zone not null default timezone('utc'::text, now()),
    "created_at" timestamp with time zone not null default timezone('utc'::text, now())
);


alter table "public"."calendars" enable row level security;

CREATE UNIQUE INDEX calendar_dates_calendar_id_date ON public.calendar_dates USING btree (calendar_id, date);

CREATE UNIQUE INDEX calendar_dates_pkey ON public.calendar_dates USING btree (id);

CREATE UNIQUE INDEX calendars_pkey ON public.calendars USING btree (id);

alter table "public"."calendar_dates" add constraint "calendar_dates_pkey" PRIMARY KEY using index "calendar_dates_pkey";

alter table "public"."calendars" add constraint "calendars_pkey" PRIMARY KEY using index "calendars_pkey";

alter table "public"."calendar_dates" add constraint "calendar_dates_calendar_id_fkey" FOREIGN KEY (calendar_id) REFERENCES calendars(id) ON DELETE CASCADE not valid;

alter table "public"."calendar_dates" validate constraint "calendar_dates_calendar_id_fkey";

alter table "public"."calendar_dates" add constraint "calendar_dates_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."calendar_dates" validate constraint "calendar_dates_user_id_fkey";

alter table "public"."calendars" add constraint "calendars_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."calendars" validate constraint "calendars_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.update_updated_at_timestamp()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
   NEW.updated_at = now(); 
   RETURN NEW;
END;
$function$
;

create policy "user_access_own_calendar_dates"
on "public"."calendar_dates"
as permissive
for all
to public
using ((auth.uid() = user_id));


create policy "user_access_own_calendars"
on "public"."calendars"
as permissive
for all
to public
using ((auth.uid() = user_id));


CREATE TRIGGER update_calendars_updated_at_timestamp BEFORE UPDATE ON public.calendars FOR EACH ROW EXECUTE FUNCTION update_updated_at_timestamp();


